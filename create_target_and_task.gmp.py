from argparse import Namespace
from gvm.protocols.gmp import Gmp
#from gvmtools.helper import Table
# we use pandas for the nice dataframes
import pandas as pd

# vars
scanner_id = "27ebc4c1-62ab-43f2-8f25-a0bddc41811b" # our ZIT OpenVAS scanner
config_id = "daba56c8-73ec-11df-a475-002264764cea" # full and fast
alert_id = "dccd853a-998a-4612-bcf5-7f46bda08096" # our ZIT alert


def get_autogenerated_targets(gmp: Gmp) -> pd.DataFrame:
  """
  gets a list of targets, which are already autogenerated
  we use it later to check, if a target already exists
  """
  targets = pd.DataFrame()
  #targets = gmp.get_targets(filter_string="name~zit_ rows=-1").xpath('target')

  #for target in targets:
  for target in gmp.get_targets(filter_string="name~zit_ rows=-1").xpath('target'):
    id = target.xpath('./@id')
    name = target.xpath('name/text()')
    hosts = target.xpath('hosts/text()')
    in_use = target.xpath('in_use/text()')
    targets = targets.append({'id': id, 'name': name, 'hosts': hosts, 'in_use': in_use}, ignore_index=True)
    #print('id: '.join(target.xpath('./@id')))
    #print('name: '.join(target.xpath('name/text()')))
    #print('hosts: '.join(target.xpath('hosts/text()')))
    #print('in_use: '.join(target.xpath('in_use/text()')))
  return targets

def get_autogenerated_tasks(gmp: Gmp) -> None:
  """
  get a list auf already generated tasks. There should be one single task for every target
  we use it later to avoid the task generation if task already exists
  """
  tasks = gmp.get_tasks(filter_string="name~zit_ rows=-1").xpath('task')
  for task in tasks:
    print('id: '.join(task.xpath('./@id')))
    print('name: '.join(task.xpath('name/text()')))
    print('in_use: '.join(task.xpath('in_use/text()')))
    print('config_id: '.join(task.xpath('config/@id')))
    print('config_name: '.join(task.xpath('config/name/text()')))
    # target_id
    print('target_id: '.join(task.xpath('target/@id')))
    print('target_name: '.join(task.xpath('target/name/text()')))
    print('scanner_id: '.join(task.xpath('scanner/@id')))
    print('scanner_name: '.join(task.xpath('scanner/name/text()')))
    # status (running, done, ...)
    print('status: '.join(task.xpath('status/text()')))
    print('alert_id: '.join(task.xpath('alert/@id')))
    print('alert_name: '.join(task.xpath('alert/name/text()')))
    # report_count finished (durchgelaufene Tasks)
    print('finished_count: '.join(task.xpath('report_count/finished/text()')))
    print('last_run: '.join(task.xpath('last_report/report/scan_end/text()')))
    # max_checks and max_hosts
    print('max_checks: '.join(task.xpath('preferences/preference/scanner_name[contains(., "max_checks")]/../value/text()')))
    print('max_checks: '.join(task.xpath('preferences/preference/scanner_name[contains(., "max_hosts")]/../value/text()')))

if __name__ == '__gmp__':
  targets = get_autogenerated_targets(gmp)
  targets.describe()
  #get_autogenerated_tasks(gmp)
