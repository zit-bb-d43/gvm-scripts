from argparse import Namespace
from gvm.protocols.gmp import Gmp
#from gvmtools.helper import Table
# we use pandas for the nice dataframes
import pandas as pd
# for urllist
import sys

# vars
scanner_id = "27ebc4c1-62ab-43f2-8f25-a0bddc41811b" # our ZIT OpenVAS scanner
config_id = "daba56c8-73ec-11df-a475-002264764cea" # full and fast
alert_id = "dccd853a-998a-4612-bcf5-7f46bda08096" # our ZIT alert
portlist_id = "738edcdd-a52f-4b0c-81a7-a2cf004d2c4c" # our Port List
preferences ={'max_checks': '3', 'max_hosts': '1'} # only one host and max. 3 concurrent checks, because we have a tiny vm
# prefix for targets and task to filter this generated by script
prefix_target = "###_"
prefix_task = "@@@_"



def get_autogenerated_targets(gmp: Gmp) -> pd.DataFrame:
  """
  gets a list of targets, which are already autogenerated
  we use it later to check, if a target already exists
  """
  targets = pd.DataFrame()

  #for target in targets:
  for target in gmp.get_targets(filter_string="name~"+prefix_target+" rows=-1").xpath('target'):
    id = ''.join(target.xpath('./@id'))
    name = ''.join(target.xpath('name/text()'))
    hosts = ''.join(target.xpath('hosts/text()'))
    in_use = ''.join(target.xpath('in_use/text()'))
    targets = targets.append({'id': id, 'name': name, 'hosts': hosts, 'in_use': in_use}, ignore_index=True)
  return targets

def get_autogenerated_tasks(gmp: Gmp) -> pd.DataFrame:
  """
  get a list auf already generated tasks. There should be one single task for every target
  we use it later to avoid the task generation if task already exists
  """
  tasks = pd.DataFrame()
  for task in gmp.get_tasks(filter_string="name~"+prefix_task+" rows=-1").xpath('task'):
    id = ''.join(task.xpath('./@id'))
    name = ''.join(task.xpath('name/text()'))
    #in_use = ''.join(task.xpath('in_use/text()'))
    #config_id = ''.join(task.xpath('config/@id'))
    #config_name = ''.join(task.xpath('config/name/text()'))
    target_id = ''.join(task.xpath('target/@id'))
    target_name = ''.join(task.xpath('target/name/text()'))
    #scanner_id = ''.join(task.xpath('scanner/@id'))
    #scanner_name = ''.join(task.xpath('scanner/name/text()'))
    #status = ''.join(task.xpath('status/text()'))
    #alert_id = ''.join(task.xpath('alert/@id'))
    #alert_name = ''.join(task.xpath('alert/name/text()'))
    #finished_count = ''.join(task.xpath('report_count/finished/text()'))
    #last_run = ''.join(task.xpath('last_report/report/scan_end/text()'))
    #max_checks = ''.join(task.xpath('preferences/preference/scanner_name[contains(., "max_checks")]/../value/text()'))
    #max_checks = ''.join(task.xpath('preferences/preference/scanner_name[contains(., "max_hosts")]/../value/text()'))
    tasks = tasks.append({'id': id, 'name': name, 'target_id': target_id, 'target_name': target_name}, ignore_index=True)
  return tasks

def check_args(args):
  """
  stolen from https://github.com/greenbone/gvm-tools/blob/main/scripts/create-targets-from-host-list.gmp.py
  """
  len_args = len(args.script) - 1
  if len_args != 1:
    message = """
    This script pulls hostnames from a text file and creates a target \
    for each.
    One parameter after the script name is required.
    Example:
    $ gvm-script socket create_target_and_task.gmp.py <hosts_textfile>
    """
    print(message)
    sys.exit()

def load_url_list(urlfile):
  """
  also stolen from https://github.com/greenbone/gvm-tools/blob/main/scripts/create-targets-from-host-list.gmp.py
  """
  try:
    with open(urlfile, encoding='utf-8') as f:
      content = f.readlines()
      url_list = [x.strip() for x in content]
      url_list = list(filter(None, url_list))
  except IOError as e:
    error_and_exit(f"Failed to read urlfile: {str(e)} (exit)")

  if len(url_list) == 0:
    error_and_exit("URL file is empty (exit)")

  return url_list

def create_target(gmp,url):
  """
  creates a target and return target_id
  """
  return gmp.create_target(name=prefix_target+url, hosts=[url], port_list_id=portlist_id, preferences=preferences )

def create_task(gmp, url, target_id):
  """
  creates a task for given target with predefined scanner, config, alert
  """
  return gmp.create_task(name=prefix_task+url, config_id=config_id, target_id=target_id, scanner_id=scanner_id, alterable=True, alert_ids=[alert_id])

def create_target_and_task(gmp, urllist, existing_targets, existing_tasks):
  """
  takes an url from urllist and checks, if ther's already an existing target. 
  If yes, it checks if there a existsting task. if target ex. but no task, a task will be created
  If not, it creates a target and a task. 

  That's the idea.
  """
  for url in urllist:
    print(url)
    # check, if target already ex.
    if(url in existing_targets['hosts'].values):
      print(f"Target {url} already exists. Check if already in use ...")
      target = existing_targets.loc[existing_targets['hosts'] == url, ['id', 'in_use']].values[0]
      # later task check if in_use==0
      if(target[1]=='0'):
        print(f"target {target[0]} not in_use. create task")
        create_task(gmp,url,target[0])
    else:
      print(f"create target for {url}")
      target = create_target(gmp,url)
      if(target.xpath('./@status')[0]=='201'):
        target_id = target.xpath('./@id')[0]
        print(f"target for {url} with id {target_id} created.")
        print(f"create task with target {url}")
        task = create_task(gmp,url,target_id)
        if(task.xpath('/@status')=='201'):
          print(f"task for {url} created with id {task.xpath('/@id')}")
        else:
          print(f"error: create_task for {url} failed")
          pretty_print(task)
      else:
        print(f"Error. create_target for {url} failed.")
        pretty_print(target)





if __name__ == '__gmp__':
  # check number of args
  check_args(args)

  # create urllist from given file
  urlfile = args.script[1]
  urllist = load_url_list(urlfile)

  existing_targets = get_autogenerated_targets(gmp)
  existing_tasks = get_autogenerated_tasks(gmp)
  #print(existing_targets.describe())
  #print(existing_targets.head())
  #print(existing_tasks.describe())
  #print(existing_tasks.head())

  create_target_and_task(gmp,urllist,existing_targets,existing_tasks)
